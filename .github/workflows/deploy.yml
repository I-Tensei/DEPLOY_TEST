name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: Build backend
      run: |
        cd backend/demo
        mvn clean package -DskipTests

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST_NAME: ${{ secrets.EC2_HOST }}
        USER_NAME: ec2-user
      run: |
        echo "=== Starting deployment process ==="
        
        # SSH秘密鍵を設定
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key
        
        # SSH接続テスト
        echo "Testing SSH connection to bastion host: ${HOST_NAME}"
        ssh -i private_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 \
          -o UserKnownHostsFile=/dev/null ${USER_NAME}@${HOST_NAME} \
          'echo "✓ Bastion host connection successful"'
        
        # バックエンドのデプロイ
        echo "=== Backend Deployment ==="
        
        # JARファイルをバスティオンホストに転送
        echo "Uploading JAR file to bastion host..."
        scp -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          backend/demo/target/demo-0.0.1-SNAPSHOT.jar ${USER_NAME}@${HOST_NAME}:/tmp/demo-app.jar
        
        # プライベートサーバーへのデプロイ
        echo "Deploying to private server..."
        ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ${USER_NAME}@${HOST_NAME} 'bash -s' << 'BACKEND_SCRIPT'
        set -e
        echo "Connected to bastion host"
        
        # プライベートサーバーの既存Javaプロセスを停止
        echo "Stopping existing Java processes..."
        ssh -i /home/ec2-user/MyKeyPair.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ec2-user@10.0.2.123 'pkill java || true; sleep 3'
        
        # JARファイルをプライベートサーバーに転送
        echo "Transferring JAR to private server..."
        scp -i /home/ec2-user/MyKeyPair.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          /tmp/demo-app.jar ec2-user@10.0.2.123:/home/ec2-user/demo-0.0.1-SNAPSHOT.jar
        
        # プライベートサーバーでアプリケーションを起動
        echo "Starting application..."
        ssh -i /home/ec2-user/MyKeyPair.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ec2-user@10.0.2.123 'cd /home/ec2-user && nohup java -jar demo-0.0.1-SNAPSHOT.jar --server.address=0.0.0.0 > app.log 2>&1 & sleep 5'
        
        # クリーンアップ
        rm -f /tmp/demo-app.jar
        echo "✓ Backend deployment completed"
        BACKEND_SCRIPT
        
        # フロントエンドのデプロイ
        echo "=== Frontend Deployment ==="
        
        # フロントエンド用ディレクトリ準備
        echo "Preparing frontend deployment..."
        ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ${USER_NAME}@${HOST_NAME} 'sudo rm -rf /usr/share/nginx/html/* && sudo mkdir -p /tmp/frontend'
        
        # フロントエンドファイルを転送
        echo "Uploading frontend files..."
        scp -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -r frontend/build/* ${USER_NAME}@${HOST_NAME}:/tmp/frontend/
        
        # Nginxにデプロイ
        echo "Deploying to Nginx..."
        ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ${USER_NAME}@${HOST_NAME} 'bash -s' << 'FRONTEND_SCRIPT'
        sudo cp -r /tmp/frontend/* /usr/share/nginx/html/
        sudo chown -R nginx:nginx /usr/share/nginx/html/
        sudo systemctl restart nginx
        sudo rm -rf /tmp/frontend
        echo "✓ Frontend deployment completed"
        FRONTEND_SCRIPT
        
        # クリーンアップ
        rm -f private_key
        echo "=== Deployment completed successfully ==="
