name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build backend
        run: |
          cd backend/demo
          mvn -T 2C -B clean package -DskipTests

      - name: Build frontend
        working-directory: frontend
        run: |
          # Prefer reproducible install; if lockfile is out of sync (e.g., deps added),
          # fall back to npm install so the build won't fail.
          npm ci --no-audit --no-fund || (echo "npm ci failed; falling back to npm install" && npm install --no-audit --no-fund)
          npm run build

      - name: Pre-check Bastion:22
        run: |
          BASTION="${{ secrets.BASTION_HOST }}"
          timeout 5 bash -c "</dev/tcp/${BASTION}/22" || { echo "Bastion:22 unreachable"; exit 1; }

      - name: SSH handshake warm-up
        shell: bash
        env:
          BASTION: ${{ secrets.BASTION_HOST }}
        run: |
          KEY=$(mktemp)
          printf "%s" "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > "$KEY" && chmod 600 "$KEY"
          # Quick handshake retries; non-fatal (banner exchange can be flaky)
          for i in 1 2 3 4 5; do
            if ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=8 -o ConnectionAttempts=1 -o IPQoS=none -i "$KEY" ec2-user@"$BASTION" 'echo ok' ; then
              echo "Handshake OK"; break; fi
            echo "Handshake try $i failed; retrying..."; sleep 3
          done || true
          rm -f "$KEY"
          # Do not fail here; upload step has its own retries

      - name: Upload artifacts to Bastion
        shell: bash
        env:
          BASTION: ${{ secrets.BASTION_HOST }}
        run: |
          set -e
          KEY=$(mktemp)
          printf "%s" "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > "$KEY" && chmod 600 "$KEY"
          # Pack frontend as a single tarball to avoid scp -r overhead
          [ -d frontend/build ] || { echo "No frontend build dir"; exit 1; }
          tar -C frontend/build -czf frontend_build.tgz .
          upload() {
            src="$1"; dst="$2";
            timeout 240 scp -C \
              -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -o PreferredAuthentications=publickey -o IdentitiesOnly=yes \
              -o ConnectTimeout=25 -o ServerAliveInterval=15 -o ServerAliveCountMax=3 -o IPQoS=none \
              -i "$KEY" "$src" ec2-user@"$BASTION":"$dst";
          }
          for f in 1 2 3 4 5; do
            if upload frontend_build.tgz /tmp/frontend_build.tgz; then ok1=1; break; fi
            d=$(( 2**(f-1) )); if [ $d -gt 10 ]; then d=10; fi
            echo "Retry scp frontend ($f/5) after ${d}s..."; sleep "$d";
          done
          [ "${ok1:-0}" = "1" ] || { echo "Upload frontend failed"; exit 1; }
          for f in 1 2 3 4 5; do
            if upload backend/demo/target/demo-0.0.1-SNAPSHOT.jar /tmp/demo-0.0.1-SNAPSHOT.jar; then ok2=1; break; fi
            d=$(( 2**(f-1) )); if [ $d -gt 10 ]; then d=10; fi
            echo "Retry scp jar ($f/5) after ${d}s..."; sleep "$d";
          done
          [ "${ok2:-0}" = "1" ] || { echo "Upload jar failed"; exit 1; }
          rm -f frontend_build.tgz
          rm -f "$KEY"

      - name: Deploy on Bastion (nginx + backend)
        continue-on-error: true
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          timeout: 300s
          command_timeout: 600s
          script: |
            set -e
            # Ensure packages
            command -v nginx >/dev/null 2>&1 || sudo dnf -y install nginx || sudo yum -y install nginx || true
            sudo systemctl enable --now nginx || true
            command -v java >/dev/null 2>&1 || sudo dnf -y install java-17-openjdk-headless || sudo yum -y install java-17-openjdk-headless || true

            # Keep firewall simple and predictable
            if sudo systemctl is-active firewalld >/dev/null 2>&1; then
              sudo systemctl stop firewalld
              sudo systemctl disable firewalld
            fi

            # Backend (systemd)
            sudo mkdir -p /opt/demo /var/log/demo /home/ec2-user/data
            if [ -f /tmp/demo-0.0.1-SNAPSHOT.jar ]; then sudo mv -f /tmp/demo-0.0.1-SNAPSHOT.jar /opt/demo/demo.jar; fi
            if [ ! -f /opt/demo/demo.jar ]; then echo "ERROR: JAR missing at /opt/demo/demo.jar"; exit 1; fi
            sudo chown -R ec2-user:ec2-user /opt/demo /var/log/demo /home/ec2-user/data
            sudo bash -lc '{
              echo "[Unit]";
              echo "Description=Spring Boot Demo";
              echo "After=network-online.target";
              echo "Wants=network-online.target";
              echo "";
              echo "[Service]";
              echo "User=ec2-user";
              echo "WorkingDirectory=/opt/demo";
              echo "Environment=JAVA_OPTS=-Xms128m -Xmx256m -XX:+UseG1GC -XX:MaxRAMPercentage=50";
              echo "Environment=SERVER_ADDRESS=0.0.0.0";
              echo "Environment=SERVER_PORT=8080";
              # Use MySQL profile (application-mysql.properties) instead of embedded H2
              echo "Environment=SPRING_PROFILES_ACTIVE=mysql";
              echo "ExecStart=/usr/bin/java \$JAVA_OPTS -jar /opt/demo/demo.jar";
              echo "SuccessExitStatus=143";
              echo "Restart=always";
              echo "RestartSec=3";
              echo "StandardOutput=append:/var/log/demo/app.log";
              echo "StandardError=inherit";
              echo "LimitNOFILE=65535";
              echo "";
              echo "[Install]";
              echo "WantedBy=multi-user.target";
            } | sudo tee /etc/systemd/system/demo.service >/dev/null'
            sudo systemctl daemon-reload
            sudo systemctl enable --now demo.service

            # Wait for backend
            for i in $(seq 1 45); do
              if ss -lntp | grep -q ":8080"; then echo "Backend up (after $((i*2))s)"; break; fi; sleep 2; done
            if ! ss -lntp | grep -q ":8080"; then
              echo "ERROR: Backend failed to listen on 8080";
              sudo systemctl --no-pager --full status demo.service || true
              sudo journalctl -u demo.service -n 200 --no-pager || true
              exit 1
            fi

            # Frontend files
            if [ -f "/tmp/frontend_build.tgz" ]; then
              sudo rm -rf /usr/share/nginx/html/*
              sudo mkdir -p /usr/share/nginx/html
              sudo tar -xzf /tmp/frontend_build.tgz -C /usr/share/nginx/html
              rm -f /tmp/frontend_build.tgz
            fi

            # Nginx (after backend is ready) - Basic Auth removed
            sudo rm -f /etc/nginx/conf.d/*.conf || true
            sudo rm -f /etc/nginx/.htpasswd || true
            sudo bash -lc '{
              echo "server {";
              echo "  listen 0.0.0.0:80;";
              echo "  listen [::]:80;";
              echo "  location / {";
              echo "    root /usr/share/nginx/html;";
              echo "    index index.html index.htm;";
              echo "    try_files \$uri \$uri/ /index.html;";
              echo "  }";
              echo "  location /api {";
              echo "    proxy_pass http://127.0.0.1:8080;";
              echo "    proxy_connect_timeout 2s;";
              echo "    proxy_read_timeout 25s;";
              echo "    proxy_next_upstream error timeout http_502 http_503 http_504;";
              echo "    proxy_set_header Host \$host;";
              echo "    proxy_set_header X-Real-IP \$remote_addr;";
              echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
              echo "    proxy_set_header X-Forwarded-Proto \$scheme;";
              echo "  }";
              echo "}";
            } | sudo tee /etc/nginx/conf.d/app.conf >/dev/null'
            sudo nginx -t
            sudo systemctl restart nginx

            # Quick internal checks
            timeout 5 curl -sI http://127.0.0.1/ | head -n 1 || echo "Local nginx check failed"
            curl -sS -m 5 http://127.0.0.1:8080/api/items | head -c 200 || true

            # Keep output quiet on success; show logs only on failure
            set +e
            sudo systemctl is-active nginx >/dev/null && sudo systemctl is-active demo >/dev/null
            if [ $? -ne 0 ]; then
              echo "--- demo.service (status) ---"; sudo systemctl --no-pager --full status demo.service || true
              echo "--- demo.service (journal) ---"; sudo journalctl -u demo.service -n 200 --no-pager || true
              echo "--- nginx error.log (last 50) ---"; sudo tail -n 50 /var/log/nginx/error.log 2>/dev/null || true
              exit 1
            fi
            echo "Deployment step finished"
            exit 0

      - name: External reachability check (HTTP)
        env:
          BASTION: ${{ secrets.BASTION_HOST }}
          BASIC_AUTH_USER: ${{ secrets.BASIC_AUTH_USER }}
          BASIC_AUTH_PASS: ${{ secrets.BASIC_AUTH_PASS }}
        run: |
          set -e
          AUTH_ARGS=""
          if [ -n "${BASIC_AUTH_USER}" ] && [ -n "${BASIC_AUTH_PASS}" ]; then AUTH_ARGS="-u ${BASIC_AUTH_USER}:${BASIC_AUTH_PASS}"; fi
          echo "Probing http://$BASTION ..."
          if ! curl -sS -m 8 $AUTH_ARGS -I "http://$BASTION/" | head -n 1; then
            echo "ERROR: Port 80 unreachable from GitHub runner or auth failed."; exit 1;
          fi
          echo "Probing http://$BASTION/api/items ..."
          curl -sS -m 8 $AUTH_ARGS "http://$BASTION/api/items" | head -c 400 || true

      - name: Notify Success
        if: ${{ success() }}
        run: echo "Deployment finished"
