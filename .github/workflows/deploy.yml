name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build backend
        run: |
          cd backend/demo
          mvn -T 2C -B clean package -DskipTests

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci --no-audit --no-fund
          npm run build

      - name: Upload frontend to Bastion
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "frontend/build"
          target: "/tmp/frontend_new"
          strip_components: 2

      - name: Upload JAR to Bastion
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "backend/demo/target/demo-0.0.1-SNAPSHOT.jar"
          target: "/tmp/"
          strip_components: 3

      - name: Deploy on Bastion (frontend + reverse proxy + forward JAR)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          timeout: 180s
          command_timeout: 300s
          script: |
            echo "=== Starting deployment on Bastion ==="

            if [ -d "/tmp/frontend_new" ]; then
              echo "Deploying frontend to Bastion..."
              sudo rm -rf /usr/share/nginx/html/* || true
              sudo cp -r /tmp/frontend_new/* /usr/share/nginx/html/ || true
              sudo chown -R nginx:nginx /usr/share/nginx/html/ || true
              rm -rf /tmp/frontend_new
              echo "Frontend deployed on Bastion"
            fi

            echo "Setting up Nginx reverse proxy on Bastion..."
            sudo tee /etc/nginx/conf.d/api-proxy.conf > /dev/null <<'NGINXEOF'
            server {
                listen 80;
                server_name _;
                location / {
                    root /usr/share/nginx/html;
                    index index.html index.htm;
                    try_files $uri $uri/ /index.html;
                }
                location /api {
                    proxy_pass http://172.27.11.203:8080;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            NGINXEOF

            sudo nginx -t && sudo systemctl restart nginx || echo "Nginx restart failed on Bastion"

            if [ -f "/tmp/demo-0.0.1-SNAPSHOT.jar" ]; then
              echo "Forwarding JAR to Private EC2 via LAN..."
              KEY_FILE="/home/ec2-user/.ssh/gha_key"
              umask 077
              rm -f "$KEY_FILE" 2>/dev/null || true
              printf "%s" "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > "$KEY_FILE"
              chmod 600 "$KEY_FILE"
              trap 'rm -f "$KEY_FILE"' EXIT
              # quick reachability check
              ssh -i "$KEY_FILE" -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=10 -T ec2-user@172.27.11.203 "echo ok" || {
                echo "ERROR: SSH to Private EC2 failed (port 22 unreachable or key rejected).";
                exit 1;
              }
              scp -C -i "$KEY_FILE" -o StrictHostKeyChecking=no -o ConnectTimeout=20 -o ServerAliveInterval=15 -o ServerAliveCountMax=4 \
                /tmp/demo-0.0.1-SNAPSHOT.jar ec2-user@172.27.11.203:/tmp/demo-0.0.1-SNAPSHOT.jar
              rm -f "$KEY_FILE"
              echo "JAR forwarded to Private EC2"
            fi

            echo "✓ Deployment on Bastion completed"

      - name: Deploy on Private (backend only)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRIVATE_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          proxy_host: ${{ secrets.BASTION_HOST }}
          proxy_username: ec2-user
          proxy_key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          timeout: 180s
          command_timeout: 300s
          script: |
            echo "=== Starting deployment on Private EC2 ==="
            pkill java || true
            sleep 3
            echo "Ensuring Java 17 runtime is installed..."
            if ! command -v java >/dev/null 2>&1; then
              if command -v dnf >/dev/null 2>&1; then
                echo "Using dnf to install JRE..."
                sudo dnf -y install java-17-amazon-corretto-headless \
                  || sudo dnf -y install java-17-openjdk-headless \
                  || sudo dnf -y install java-17-openjdk || true
              elif command -v yum >/dev/null 2>&1; then
                echo "Using yum to install JRE..."
                if command -v amazon-linux-extras >/dev/null 2>&1; then
                  sudo amazon-linux-extras enable corretto17 || true
                  sudo yum clean metadata || true
                fi
                sudo yum -y install java-17-amazon-corretto-headless \
                  || sudo yum -y install java-17-openjdk-headless \
                  || sudo yum -y install java-17-openjdk || true
              else
                echo "ERROR: No supported package manager found (dnf/yum)."; exit 1;
              fi
            fi
            if ! command -v java >/dev/null 2>&1; then
              echo "ERROR: Java 17 installation failed. Please install manually (e.g., Corretto 17)."; exit 1;
            fi
            java -version
            if [ -f "/tmp/demo-0.0.1-SNAPSHOT.jar" ]; then
              echo "Deploying backend to Private EC2..."
              mv -f /tmp/demo-0.0.1-SNAPSHOT.jar /home/ec2-user/demo-0.0.1-SNAPSHOT.jar
            fi
            cd /home/ec2-user
            echo "Starting Spring Boot JAR..."
            nohup java -jar demo-0.0.1-SNAPSHOT.jar --server.address=0.0.0.0 > app.log 2>&1 &
            # wait up to ~30s for port 8080 to listen
            for i in $(seq 1 15); do
              if ss -lntp | grep -q ":8080"; then
                break
              fi
              sleep 2
            done
            if ! ss -lntp | grep -q ":8080"; then
              echo "ERROR: Port 8080 is not listening. Recent logs:"; tail -n 200 app.log || true; exit 1;
            fi
            echo "Backend is listening on 8080. Health probe:"
            curl -sS -m 5 http://127.0.0.1:8080/api/items | head -c 500 || true
            echo
            echo "Recent logs:"; tail -n 100 app.log || true
            echo "✓ Deployment on Private EC2 completed"

      - name: Notify Success
        if: ${{ success() }}
        run: echo "Deployment to AWS EC2 instances completed successfully."
        #sotuu test

