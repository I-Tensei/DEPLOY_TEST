name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: Build backend
      run: |
        cd backend/demo
        mvn clean package -DskipTests

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Upload JAR to Server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        source: "backend/demo/target/demo-0.0.1-SNAPSHOT.jar"
        target: "/tmp/"
        strip_components: 3

    - name: Upload Frontend to Server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        source: "frontend/build/*"
        target: "/tmp/frontend_new/"
        strip_components: 2

    - name: Deploy Application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        timeout: 180s
        command_timeout: 60s
        script: |
          echo "=== Starting deployment ==="
          
          # Stop existing Java process on private server (with timeout)
          timeout 30 ssh -i /home/ec2-user/MyKeyPair.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            ec2-user@10.0.2.123 'pkill java || true' || echo "Java stop timeout - continuing"
          
          # Deploy backend JAR
          if [ -f "/tmp/demo-0.0.1-SNAPSHOT.jar" ]; then
            echo "Deploying backend..."
            timeout 60 scp -i /home/ec2-user/MyKeyPair.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
              /tmp/demo-0.0.1-SNAPSHOT.jar ec2-user@10.0.2.123:/home/ec2-user/demo-0.0.1-SNAPSHOT.jar
            
            # Start new application (with timeout)
            timeout 30 ssh -i /home/ec2-user/MyKeyPair.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
              ec2-user@10.0.2.123 'cd /home/ec2-user && nohup java -jar demo-0.0.1-SNAPSHOT.jar --server.address=0.0.0.0 > app.log 2>&1 &' || echo "App start timeout - app may still be starting"
            
            echo "Backend deployed and started"
          fi
          
          # Deploy frontend (with timeout)
          if [ -d "/tmp/frontend_new" ]; then
            echo "Deploying frontend..."
            timeout 30 sudo rm -rf /usr/share/nginx/html/* || true
            timeout 30 sudo cp -r /tmp/frontend_new/* /usr/share/nginx/html/ || true
            timeout 30 sudo chown -R nginx:nginx /usr/share/nginx/html/ || true
            rm -rf /tmp/frontend_new
            echo "Frontend deployed"
          fi
          
          # Configure Nginx reverse proxy (one-time setup)
          echo "Setting up Nginx reverse proxy..."
          sudo tee /etc/nginx/conf.d/api-proxy.conf > /dev/null << 'NGINXEOF'
          server {
              listen 80;
              server_name _;
          
              # フロントエンド（React）
              location / {
                  root /usr/share/nginx/html;
                  index index.html index.htm;
                  try_files $uri $uri/ /index.html;
              }
          
              # API プロキシ（プライベートサーバーへ転送）
              location /api/ {
                  proxy_pass http://10.0.2.123:8080/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  
                  # CORS設定
                  add_header 'Access-Control-Allow-Origin' '*' always;
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                  
                  # プリフライトリクエスト対応
                  if ($request_method = 'OPTIONS') {
                      add_header 'Access-Control-Allow-Origin' '*';
                      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                      add_header 'Access-Control-Max-Age' 1728000;
                      add_header 'Content-Type' 'text/plain; charset=utf-8';
                      add_header 'Content-Length' 0;
                      return 204;
                  }
              }
          }
          NGINXEOF
          
          # Test and restart Nginx
          sudo nginx -t && sudo systemctl restart nginx || echo "Nginx restart failed"
          
          echo "✓ All deployments completed"
